{"version":3,"file":"io.greenscreens.cryptojs.min.js","sources":["../modules/CryptoKeyJS.mjs","../modules/WasmLoader.mjs","../modules/CryptoJS.mjs"],"sourcesContent":["/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\nexport default class CryptoKeyJS {\r\n\r\n    static #ERR_INVALID_SHA = 'Invalid SHA-x';\r\n    static #ERR_INVALID_ALG = 'Invalid algorithm';\r\n\r\n    static #ASYNC_KEYS = ['ECDSA', 'ECDH', 'RSA-PSS', 'RSA-OAEP', 'RSASSA-PKCS1-v1_5', 'Ed25519', 'X25519'];\r\n    static #PRIVATE_OPS = ['sign', 'decrypt', 'deriveBits', 'deriveKey'];\r\n\r\n    #algorithm;\r\n    #extractable;\r\n    #usages;\r\n    #key;\r\n\r\n    constructor(algorithm, extractable, usages, key) {\r\n\r\n        if (typeof key?.error === 'string') throw new Error(key.error);\r\n\r\n        if (extractable && (algorithm.name || algorithm).indexOf('KDF') > -1) {\r\n            throw new DOMException(\"KDF keys must set extractable=false\");\r\n        }\r\n\r\n        const me = this;\r\n        me.#algorithm = algorithm;\r\n        me.#extractable = extractable;\r\n        me.#usages = usages;\r\n        me.#key = key;\r\n    }\r\n\r\n    get extractable() {\r\n        return this.#extractable;\r\n    }\r\n\r\n    get isAsync() {\r\n        return CryptoKeyJS.#ASYNC_KEYS.indexOf(this.#algorithmName) > -1;\r\n    }\r\n\r\n    get isPublic() {\r\n        const me = this;\r\n        if (!me.isAsync) return false;\r\n        return me.#usages.length === 0 || ['verify', 'encrypt'].some(r => me.#usages.includes(r));\r\n    }\r\n\r\n    get isPrivate() {\r\n        const me = this;\r\n        if (!me.isAsync) return false;\r\n        return CryptoKeyJS.#PRIVATE_OPS.some(r => me.#usages.includes(r));\r\n    }\r\n\r\n    get type() {\r\n        const me = this;\r\n        if (!me.isAsync) return 'secret';\r\n        return me.isPrivate ? 'private' : 'public';\r\n    }\r\n\r\n    get algorithm() {\r\n        if (typeof this.#algorithm === 'string') return this.#algorithm;\r\n        return Object.assign({}, this.#algorithm);\r\n    }\r\n\r\n    get usages() {\r\n        return Array.from(this.#usages);\r\n    }\r\n\r\n    get crypto() {\r\n        globalThis.CryptoWasm.gc = true;\r\n        return globalThis.CryptoWasm;\r\n    }\r\n\r\n    get #hashName() {\r\n        const algo = this.#algorithm;\r\n        return algo.hash?.name || algo.hash || algo.namedCurve;\r\n    }\r\n\r\n    get #algorithmName() {\r\n        return this.#algorithm.name || this.#algorithm;\r\n    }\r\n\r\n    get #hashSize() {\r\n        return CryptoKeyJS.hashSize(this.#hashName);\r\n    }\r\n\r\n    get #hashid() {\r\n        return this.#hashID(this.#hashName);\r\n    }\r\n\r\n    get #jwkAlgo() {\r\n\r\n        const me = this;\r\n        const hbit = me.#hashid;\r\n\r\n        if (me.isAsync) {\r\n            switch(me.#algorithmName) {\r\n                case 'RSASSA-PKCS1-v1' : return `RS${hbit}`;\r\n                case 'RSA-OAEP' : return  hbit === 1 ? 'RSA-OAEP' : `RSA-OAEP-${hbit}`;\r\n                case 'RSA-PSS' : return `PS${hbit}`;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        if (me.#algorithmName === 'HMAC') {\r\n            return `HS${me.#algorithm.length || me.#hashid}`;\r\n        } \r\n\r\n        return `A${me.#algorithm.length}${me.#algorithmName.split('-')[1]}`;\r\n    }\r\n\r\n    #hashID(hash = '') {\r\n        return parseInt(hash.split('-')[1]);\r\n    }\r\n\r\n    #verify(format, expected) {\r\n        if (!this.#extractable) throw new DOMException('InvalidAccessError');\r\n        if (expected.indexOf(format) < 0) throw new DOMException('NotSupported');\r\n    }\r\n\r\n    #verifyAsync(format) {\r\n        return this.#verify(format, ['pkcs8', 'spki', 'jwk','raw']);\r\n    }\r\n\r\n    #exportLocal(format) {\r\n        const me = this;\r\n        me.#verify(format, ['raw', 'jwk']);\r\n        if (format === 'raw') return me.#key;\r\n        return {\r\n            \"alg\" : me.#jwkAlgo,\r\n            \"ext\" : true,\r\n            \"k\" : me.crypto.toB64(me.#key, true),\r\n            \"key_ops\" : me.#usages,\r\n            \"kty\" : \"oct\"\r\n        }\r\n    }\r\n\r\n    #exportKeyAsync(format, obj) {\r\n        \r\n        const me = this;\r\n        me.#verifyAsync(format);\r\n        let fmt = 0;\r\n        switch (format) {\r\n            case 'raw': fmt = 0;\r\n            break;\r\n            case 'jwk': fmt = 2;\r\n            break;\r\n            case 'spki': fmt = 1;\r\n            case 'pkcs8': fmt = 1;\r\n        }\r\n    \r\n        const key = obj.ExportKey(me.#key, me.isPublic, fmt);\r\n        if (format === 'raw') return key;\r\n\r\n        if (format === 'jwk') {\r\n            key.key_ops = me.#usages;        \r\n            const isRSA = me.#algorithmName.indexOf('RSA') === 0;\r\n            if (isRSA) key.alg = me.#jwkAlgo;\r\n            // if (!isRSA) key.crv = me.#algorithm.namedCurve;\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    #signHMAC(data) {\r\n        const me = this;\r\n        const hmac = me.crypto.hmac;\r\n        const name = me.#hashName\r\n        switch (name) {\r\n            case 'SHA-1': return hmac.Hmac1Sign(data, me.#key);\r\n            case 'SHA-256': return hmac.Hmac256Sign(data, me.#key);\r\n            case 'SHA-384': return hmac.Hmac384Sign(data, me.#key);\r\n            case 'SHA-512': return hmac.Hmac512Sign(data, me.#key);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_SHA} : ${name}`);\r\n        }\r\n\r\n    }\r\n\r\n    #verifyHMAC(signature, data) {\r\n        const me = this;\r\n        const hmac = me.crypto.hmac;\r\n        const name = me.#hashName\r\n        switch (name) {\r\n            case 'SHA-1': return hmac.Hmac1Verify(data, signature, me.#key);\r\n            case 'SHA-256': return hmac.Hmac256Verify(data, signature, me.#key);\r\n            case 'SHA-384': return hmac.Hmac384Verify(data, signature, me.#key);\r\n            case 'SHA-512': return hmac.Hmac512Verify(data, signature, me.#key);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_SHA} : ${name}`);\r\n        }\r\n\r\n    }\r\n\r\n    #signRSASA(data) {\r\n        const me = this;\r\n        return me.crypto.rsa.SignPKCS1v15(me.#key, data, me.#hashSize);\r\n    }\r\n\r\n    #verifyRSASA(signature, data) {\r\n        const me = this;\r\n        return me.crypto.rsa.VerifyPKCS1v15(me.#key, data, signature, me.#hashSize);\r\n    }\r\n\r\n    #signPSS(data, opt) {\r\n        const me = this;\r\n        const saltLength = opt.saltLength || 0;\r\n        return me.crypto.rsa.SignPSS(me.#key, data, me.#hashSize, saltLength);\r\n    }\r\n\r\n    #verifyPSS(signature, data, opt) {\r\n        const me = this;\r\n        const saltLength = opt.saltLength || 0;\r\n        return me.crypto.rsa.VerifyPSS(me.#key, data, signature, me.#hashSize, saltLength);\r\n    }\r\n\r\n    #signEcdsa(data, opt) {\r\n        const me = this;\r\n        if (me.#algorithm.namedCurve === 'Ed25519') {\r\n            return me.#signEd25519(data);\r\n        }\r\n        const hash = opt.hash.name || opt.hash;\r\n        const size = me.#hashID(hash);\r\n        return me.crypto.ecdsa.Sign(me.#key, data, size, false);\r\n    }\r\n\r\n    #verifyEcdsa(signature, data, opt) {\r\n        const me = this;\r\n        if (me.#algorithm.namedCurve === 'Ed25519') {\r\n            return me.#verifyEd25519(signature, data);\r\n        }\r\n        const hash = opt.hash.name || opt.hash;\r\n        const size = me.#hashID(hash);\r\n        return me.crypto.ecdsa.Verify(me.#key, data, signature, size, false);\r\n    }\r\n\r\n    #signEd25519(data) {\r\n        const me = this;\r\n        return me.crypto.ed25519.Sign(me.#key, data, false);\r\n    }\r\n\r\n    #verifyEd25519(signature, data) {\r\n        const me = this;\r\n        return me.crypto.ed25519.Verify(me.#key, data, signature, false);\r\n    }\r\n\r\n    #deriveECDHBits(algorithm, bitLength = 0) {\r\n        const me = this;\r\n        const keylen = CryptoKeyJS.curveSize(me.#algorithm.namedCurve);\r\n        if (bitLength > keylen || (keylen === 25519 && bitLength > 256)) throw new DOMException('OperationError');\r\n        if (bitLength === 0) return new Uint8Array();\r\n        const raw = me.crypto.ecdh.DeriveKey(me.#key, algorithm.public.#key, bitLength);\r\n        if (typeof raw?.error === 'string') throw new Error(raw.error);\r\n        return raw;\r\n    }\r\n\r\n    #deriveHKDFBits(algorithm, bitLength) {\r\n        if (!bitLength || bitLength === 0 || bitLength % 8 > 0) throw new DOMException('OperationError');\r\n        const me = this;\r\n        return me.crypto.GenerateHKDF(me.#key, algorithm.salt, algorithm.info, bitLength);\r\n    }\r\n\r\n    #derivePBKDF2Bits(algorithm, bitLength) {\r\n        if (bitLength === 0) return new Uint8Array();\r\n        const me = this;\r\n        const size = CryptoKeyJS.hashSize(algorithm.hash);\r\n        return me.crypto.GeneratePBKDF2(me.#key, algorithm.salt, algorithm.iterations, bitLength, size);\r\n    }\r\n\r\n    #deriveECDHKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages) {\r\n        const length = derivedKeyAlgorithm.length;\r\n        const key = this.#deriveECDHBits(algorithm, length);\r\n        return new CryptoKeyJS(derivedKeyAlgorithm, extractable, keyUsages, key);\r\n    }\r\n\r\n    #deriveHKDFKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages) {\r\n        const size = CryptoKeyJS.hashSize(algorithm.hash);\r\n        const key = this.#deriveHKDFBits(algorithm, size);\r\n        return new CryptoKeyJS(derivedKeyAlgorithm, extractable, keyUsages, key);\r\n    }\r\n\r\n    #derivePBKDF2Key(algorithm, derivedKeyAlgorithm, extractable, keyUsages) {\r\n        const me = this;\r\n        const len = derivedKeyAlgorithm.length || CryptoKeyJS.hashSize(derivedKeyAlgorithm.hash);\r\n        const key = me.#derivePBKDF2Bits(algorithm, len);\r\n        return new CryptoKeyJS(derivedKeyAlgorithm, extractable, keyUsages, key);\r\n    }\r\n\r\n    deriveBits(algorithm, length) {\r\n\r\n        const me = this;\r\n        const keyName = me.#algorithmName;\r\n        const name = algorithm.name === keyName ? algorithm.name : `${algorithm.name} <-> ${keyName}`;\r\n\r\n        switch (name) {\r\n            case 'X25519':\r\n            case 'ECDH': return me.#deriveECDHBits(algorithm, length);\r\n            case 'HKDF': return me.#deriveHKDFBits(algorithm, length);\r\n            case 'PBKDF2': return me.#derivePBKDF2Bits(algorithm, length);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n    }\r\n\r\n    deriveKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages) {\r\n\r\n        const me = this;\r\n        const keyName = me.#algorithmName;\r\n        const name = algorithm.name === keyName ? algorithm.name : `${algorithm.name} <-> ${keyName}`;\r\n\r\n        switch (name) {\r\n            case 'X25519':\r\n            case 'ECDH': return me.#deriveECDHKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages);\r\n            case 'HKDF': return me.#deriveHKDFKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages);\r\n            case 'PBKDF2': return me.#derivePBKDF2Key(algorithm, derivedKeyAlgorithm, extractable, keyUsages);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n\r\n    }\r\n\r\n    sign(data, opt) {\r\n        const me = this;\r\n        const name = me.#algorithmName;\r\n        switch (name) {\r\n            case 'RSASSA-PKCS1-v1_5': return me.#signRSASA(data);\r\n            case 'RSA-PSS': return me.#signPSS(data, opt);\r\n            case 'ECDSA': return me.#signEcdsa(data, opt);\r\n            case 'HMAC': return me.#signHMAC(data);\r\n            case 'Ed25519': return me.#signEd25519(data);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n    }\r\n\r\n    verify(signature, data, opt) {\r\n        const me = this;\r\n        const name = me.#algorithmName;\r\n        switch (name) {\r\n            case 'RSASSA-PKCS1-v1_5': return me.#verifyRSASA(signature, data);\r\n            case 'RSA-PSS': return me.#verifyPSS(signature, data, opt);\r\n            case 'ECDSA': return me.#verifyEcdsa(signature, data, opt);\r\n            case 'HMAC': return me.#verifyHMAC(signature, data);\r\n            case 'Ed25519': return me.#verifyEd25519(signature, data);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n    }\r\n\r\n    decrypt(data, iv) {\r\n        const me = this;\r\n        const aes = me.crypto.aes;\r\n        const name = me.#algorithmName;\r\n        switch (name) {\r\n            case 'RSA-OAEP': return me.crypto.rsa.Decrypt(me.#key, me.#hashSize, data);\r\n            case 'AES-CTR': return aes.CTRDecrypt(me.#key, data, iv);\r\n            case 'AES-CBC': return aes.CBCDecrypt(me.#key, data, iv);\r\n            case 'AES-GCM': return aes.GCMDecrypt(me.#key, data, iv);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n    }\r\n\r\n    encrypt(data, iv) {\r\n        const me = this;\r\n        const aes = me.crypto.aes;\r\n        const name = me.#algorithmName;\r\n        switch (name) {\r\n            case 'RSA-OAEP': return me.crypto.rsa.Encrypt(me.#key, me.#hashSize, data);\r\n            case 'AES-CTR': return aes.CTREncrypt(me.#key, data, iv);\r\n            case 'AES-CBC': return aes.CBCEncrypt(me.#key, data, iv);\r\n            case 'AES-GCM': return aes.GCMEncrypt(me.#key, data, iv);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n    }\r\n\r\n    export(format) {\r\n        const me = this;\r\n        if (!me.#extractable) throw new DOMException('InvalidAccessError');\r\n        const name = me.#algorithmName;\r\n        switch (name) {\r\n            case 'AES-CBC':\r\n            case 'AES-CTR':\r\n            case 'AES-GCM':\r\n            case 'HMAC':\r\n            case 'PBKDF2':\r\n            case 'HKDF':\r\n                return me.#exportLocal(format);\r\n            case 'RSASSA-PKCS1-v1_5':\r\n            case 'RSA-OAEP':\r\n            case 'RSA-PSS':\r\n                return me.#exportKeyAsync(format, me.crypto.rsa);\r\n            case 'ECDSA':\r\n                return me.#exportKeyAsync(format, me.crypto.ecdsa);\r\n            case 'ECDH':\r\n                return me.#exportKeyAsync(format, me.crypto.ecdh);\r\n            case 'Ed25519':\r\n                return me.#exportKeyAsync(format, me.crypto.ed25519);\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_ALG} : ${name}`);\r\n        }\r\n\r\n    }\r\n\r\n    static curveSize(curve) {\r\n        switch (curve) {\r\n            case 'P-256':\r\n                return 256;\r\n            case 'P-384':\r\n                return 384;\r\n            case 'P-521':\r\n                return 521;\r\n            case 'Ed25519':\r\n            case 'X25519':\r\n                return 25519;\r\n            default: throw new Error('Invalid Curve');\r\n        }\r\n    }\r\n\r\n    static blockSize(hash) {\r\n        let size = 0;\r\n        switch (hash) {\r\n            case 'SHA-1':\r\n            case 'SHA-256':\r\n                size = 512;\r\n                break;\r\n            case 'SHA-384':\r\n            case 'SHA-512':\r\n                size = 1024;\r\n                break;\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_SHA} : ${hash}`);\r\n        }\r\n        return size;\r\n    }\r\n\r\n    static hashSize(hash) {\r\n        let size = 0;\r\n        switch (hash) {\r\n            case 'SHA-1':\r\n                size = 20;\r\n                break;\r\n            case 'SHA-256':\r\n                size = 32;\r\n                break;\r\n            case 'SHA-384':\r\n                size = 48;\r\n                break;\r\n            case 'SHA-512':\r\n                size = 64;\r\n                break;\r\n            default: throw new Error(`${CryptoKeyJS.#ERR_INVALID_SHA} : ${hash}`);\r\n        }\r\n        return size;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\n\r\n/**\r\n * WASM file loader\r\n */\r\nexport default class WasmLoader {\r\n\r\n    static RETURN_RAW = true;\r\n    static #ready = false;\r\n    static #iid = 0;\r\n    static #raw = null;\r\n\r\n    static get ready() {\r\n        return WasmLoader.#ready;\r\n    }\r\n\r\n    static get GOPATH() {\r\n        const urlLib = globalThis.CRYPTO_GO || '';\r\n        return `${urlLib}/wasm_exec.min.js`\r\n    }\r\n\r\n    static get WASMPATH() {\r\n        const urlLib = globalThis.CRYPTO_WASM || '';\r\n        return `${urlLib}/cryptojs.wasm`\r\n    }\r\n\r\n    static #release() {\r\n        WasmLoader.#ready = false;\r\n        if (WasmLoader.#iid) clearInterval(WasmLoader.#iid);\r\n        WasmLoader.#iid = 0;\r\n    }\r\n\r\n    static async init() {\r\n        if (WasmLoader.#ready) return;\r\n        WasmLoader.#raw = null;\r\n        WasmLoader.#iid = 0;\r\n        const go = await WasmLoader.#initGO();\r\n        const result = await WasmLoader.#loadWasm(WasmLoader.WASMPATH, go.importObject);\r\n        go.run(result.instance).then(() => WasmLoader.#release());\r\n        WasmLoader.#iid = globalThis.CryptoWasm.GCToken()\r\n        WasmLoader.#ready = true;\r\n        WasmLoader.#raw = { result, go };        \r\n    }\r\n\r\n    static async #initGO() {\r\n        await import(WasmLoader.GOPATH);\r\n        const go = new globalThis.Go();\r\n        // for tinygo script only - check IMPORTANT.md document\r\n        // if (go.importObject.env) go.importObject.env[\"syscall/js.finalizeRef\"] = () => { };\r\n        return go;\r\n    }\r\n\r\n    static async #loadWasm(wasm, imports) {\r\n        if (typeof WebAssembly !== 'object' || typeof WebAssembly.instantiate !== 'function') {\r\n            throw new Error('WebAssembly is not supported.');\r\n        }\r\n        return await WebAssembly.instantiateStreaming(fetch(wasm), imports);\r\n    }\r\n\r\n    static #downloadBlob(data, fileName, mimeType) {\r\n        const blob = new Blob([data], { type: mimeType });\r\n        const url = globalThis.URL.createObjectURL(blob);\r\n        WasmLoader.#downloadURL(url, fileName);\r\n        setTimeout(() => globalThis.URL.revokeObjectURL(url), 1000);\r\n    }\r\n\r\n    static #downloadURL(data, fileName) {\r\n        const a = document.createElement('a');\r\n        a.href = data;\r\n        a.download = fileName;\r\n        a.click();\r\n    }\r\n\r\n    /**\r\n     * For debug purposes; download alocated wasm memory content\r\n    static downloadMemory() {\r\n        if (!WasmLoader.#raw) return;\r\n        const buff = new Uint8Array(WasmLoader.#raw.result.instance.exports.mem.buffer);\r\n        WasmLoader.#downloadBlob(buff, 'wasm.memory.bin', 'application/octet-stream');\r\n    }\r\n    */\r\n}","/*\r\n * Copyright (C) 2015, 2023 Green Screens Ltd.\r\n */\r\nimport CryptoKeyJS from './CryptoKeyJS.mjs';\r\nimport WasmLoader from './WasmLoader.mjs';\r\n\r\nexport default class CryptoJS {\r\n\r\n    static RETURN_RAW = true;\r\n    static #ERR_INVALID_ALG = 'Invalid alogrithm!';\r\n    static #ERR_INVALID_FORMAT = 'Invalid format';\r\n    static #ERR_UNSUPPORTED = 'Unsupported operation!';\r\n    static #ERR_INVALID_KEY_ALG = 'Invalid key for algorithm';\r\n    static #ERR_INVALID_SHA = 'Invalid SHA-x';\r\n\r\n    get crypto() {\r\n        globalThis.CryptoWasm.gc = true;\r\n        return globalThis.CryptoWasm;\r\n    }\r\n\r\n    get asRaw() {\r\n        return WasmLoader.RETURN_RAW === true;\r\n    }\r\n\r\n    #toUint8Array(data) {\r\n        if (data instanceof Uint8Array) return data;\r\n        if (data instanceof ArrayBuffer) return new Uint8Array(data);\r\n        if (data instanceof DataView) return new Uint8Array(data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength));\r\n        if (data.buffer) return this.#toUint8Array(data.buffer);\r\n        throw new Error('Invalid data type!');\r\n    }\r\n\r\n    #verify(format, expected) {\r\n        if (expected.indexOf(format) < 0) throw new DOMException(CryptoJS.#ERR_INVALID_FORMAT);\r\n    }\r\n\r\n    #verifyAsync(format) {\r\n        return this.#verify(format, ['pkcs8', 'spki', 'raw']);\r\n    }\r\n\r\n    #isPublic(format) {\r\n        switch (format) {\r\n            case 'pkcs8': return false;\r\n            case 'spki':\r\n            case 'raw':\r\n                return true;\r\n            default: throw new TypeError(CryptoJS.#ERR_INVALID_FORMAT);\r\n        }\r\n    }\r\n\r\n    #importAsyncKey(format, keyData, algorithm, extractable, usages, cryptojs) {\r\n        const me = this;\r\n        me.#verifyAsync(format);\r\n        const isPublic = me.#isPublic(format);\r\n        const key = cryptojs.ImportKey(keyData, isPublic);\r\n        return new CryptoKeyJS(algorithm, extractable, usages, key);\r\n    }\r\n\r\n    #importSyncKey(format, keyData, algorithm, extractable, usages) {\r\n        this.#verify(format, ['raw']);\r\n        return new CryptoKeyJS(algorithm, extractable, usages, keyData);\r\n    }\r\n\r\n    #generateKeyAES(algorithm, extractable, usages) {\r\n        let key = null;\r\n        switch (algorithm.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                key = this.crypto.random(algorithm.length / 8);\r\n                break;\r\n            default: throw new Error('Invalid AES key length!');\r\n        }\r\n        return new CryptoKeyJS(algorithm, extractable, usages, key);\r\n    }\r\n\r\n    #generateKeyHMAC(algorithm, extractable, usages) {\r\n        const size = algorithm.length || CryptoKeyJS.blockSize(algorithm.hash);\r\n        const key = this.crypto.random(size / 8);\r\n        return new CryptoKeyJS(algorithm, extractable, usages, key);\r\n    }\r\n\r\n    #generateKeyRSA(algorithm, extractable, usages) {\r\n        let key = null;\r\n        switch (algorithm.modulusLength) {\r\n            case 1024:\r\n            case 2048:\r\n            case 4096:\r\n                let pex = 0;\r\n                algorithm.publicExponent?.forEach(v => pex = (pex << 8) + (v & 0xFF));\r\n                key = this.crypto.rsa.GenerateKey(algorithm.modulusLength, pex);\r\n                break;\r\n            default: throw new Error('Invalid modulus length');\r\n        }\r\n\r\n        let pubu = null;\r\n        let privu = null;\r\n        if (algorithm.name === 'RSA-OAEP') {\r\n            pubu = ['encrypt'];\r\n            privu = ['decrypt'];\r\n        } else {\r\n            pubu = ['verify'];\r\n            privu = ['sign'];\r\n        }\r\n\r\n        return {\r\n            publicKey: new CryptoKeyJS(algorithm, extractable, pubu, key),\r\n            privateKey: new CryptoKeyJS(algorithm, extractable, privu, key)\r\n        };\r\n    }\r\n\r\n    #generateKeyEC(algorithm, cryptojs) {\r\n        const size = CryptoKeyJS.curveSize(algorithm.namedCurve);\r\n        return cryptojs.GenerateKey(size);\r\n    }\r\n\r\n    #generateSignKeyEC(algorithm, extractable, usages, obj) {\r\n        const key = this.#generateKeyEC(algorithm, obj);\r\n        return {\r\n            publicKey: new CryptoKeyJS(algorithm, extractable, ['verify'], key),\r\n            privateKey: new CryptoKeyJS(algorithm, extractable, ['sign'], key)\r\n        };\r\n    }\r\n\r\n    #generateKeyECDSA(algorithm, extractable, usages) {\r\n        const me = this;\r\n        const obj = algorithm.namedCurve === 'Ed25519' ? me.crypto.ed25519 : me.crypto.ecdsa;\r\n        return me.#generateSignKeyEC(algorithm, extractable, usages, obj);\r\n    }\r\n\r\n    // will be available in Go 1.20 February 2023.\r\n    #generateKeyECDH(algorithm, extractable, usages) {\r\n        const me = this;\r\n        const key = me.#generateKeyEC(algorithm, me.crypto.ecdh);\r\n        return {\r\n            publicKey: new CryptoKeyJS(algorithm, extractable, [], key),\r\n            privateKey: new CryptoKeyJS(algorithm, extractable, usages, key)\r\n        };\r\n    }\r\n\r\n    #verifyName(algorithm, key) {\r\n        const name = algorithm.name || algorithm;\r\n        const keyName = key.algorithm.name || key.algorithm;\r\n        if (name != keyName) throw new Error(CryptoJS.#ERR_INVALID_KEY_ALG);\r\n    }\r\n\r\n    randomUUID() {\r\n        const raw = new Uint8Array(16);\r\n        crypto.getRandomValues(raw);\r\n        const s = this.crypto.toHex(raw).match(/.{2}/g);\r\n        if (typeof s?.error === 'string') throw new Error(s.error);\r\n        return 'xxxx-xx-xx-xx-xxxxxx'.split('').map(v => v === '-' ? v : s.pop()).join('');\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} key \r\n     * @param {*} data \r\n     */\r\n    async decrypt(algorithm, key, data) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, key);\r\n        data = me.#toUint8Array(data)\r\n        let iv = algorithm.iv || algorithm.counter;\r\n        if (iv) iv = me.#toUint8Array(iv);\r\n        const res = (key.privateKey || key).decrypt(data, iv);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return me.asRaw ? res.buffer : res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} baseKey \r\n     * @param {*} length \r\n     */\r\n    async deriveBits(algorithm, baseKey, length) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, baseKey);\r\n        const res = baseKey.deriveBits(algorithm, length);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return me.asRaw ? res.buffer : res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} baseKey \r\n     * @param {*} derivedKeyAlgorithm \r\n     * @param {*} extractable \r\n     * @param {*} keyUsages \r\n     */\r\n    async deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, baseKey);\r\n        const res = baseKey.deriveKey(algorithm, derivedKeyAlgorithm, extractable, keyUsages);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} data \r\n     */\r\n    async digest(algorithm, data) {\r\n\r\n        const me = this;\r\n        const hash = me.crypto.hash;\r\n\r\n        data = me.#toUint8Array(data);\r\n\r\n        let res = null;\r\n        switch (algorithm) {\r\n            case 'SHA-1':\r\n                res = hash.Sha1(data);\r\n                break;\r\n            case 'SHA-256':\r\n                res = hash.Sha256(data);\r\n                break;\r\n            case 'SHA-384':\r\n                res = hash.Sha384(data);\r\n                break;\r\n            case 'SHA-512':\r\n                res = hash.Sha512(data);\r\n                break;\r\n            default:\r\n                throw new Error(CryptoJS.#ERR_INVALID_SHA);\r\n        }\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return me.asRaw ? res.buffer : res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} key \r\n     * @param {*} data \r\n     */\r\n    async encrypt(algorithm, key, data) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, key);\r\n        data = me.#toUint8Array(data)\r\n        let iv = algorithm.iv || algorithm.counter;\r\n        if (iv) iv = me.#toUint8Array(iv);\r\n        const res = (key.publicKey || key).encrypt(data, iv);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return me.asRaw ? res.buffer : res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * NOTE: Not available in tinygo builds (reflection issues)\r\n     * Potentially custom build might help with this fix\r\n     * https://github.com/tinygo-org/tinygo/pull/2479/files\r\n     * @param {*} format \r\n     * @param {*} key \r\n     */\r\n    async exportKey(format, key) {\r\n        const res = key.export(format);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        if (format === 'jwk') return res;\r\n        return this.asRaw ? res.buffer || res : res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} extractable \r\n     * @param {*} keyUsages \r\n     */\r\n    async generateKey(algorithm, extractable, keyUsages) {\r\n\r\n        const me = this;\r\n        let res = null\r\n        switch (algorithm.name) {\r\n            case 'Ed25519':\r\n            case 'ECDSA':\r\n                res = me.#generateKeyECDSA(algorithm, extractable, keyUsages);\r\n                break;\r\n            case 'X25519':\r\n            case 'ECDH':\r\n                res = me.#generateKeyECDH(algorithm, extractable, keyUsages);\r\n                break;\r\n            case 'RSASSA-PKCS1-v1_5':\r\n            case 'RSA-OAEP':\r\n            case 'RSA-PSS':\r\n                res = me.#generateKeyRSA(algorithm, extractable, keyUsages);\r\n                break;\r\n            case 'HMAC':\r\n                res = me.#generateKeyHMAC(algorithm, extractable, keyUsages);\r\n                break;\r\n            case 'AES-CBC':\r\n            case 'AES-CTR':\r\n            case 'AES-GCM':\r\n                res = me.#generateKeyAES(algorithm, extractable, keyUsages);\r\n                break;\r\n            default: throw new Error(CryptoJS.#ERR_INVALID_ALG);\r\n        }\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * NOTE: Not available in tinygo builds (reflection issues)\r\n     * @param {*} format \r\n     * @param {*} keyData \r\n     * @param {*} algorithm \r\n     * @param {*} extractable \r\n     * @param {*} keyUsages \r\n     */\r\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const me = this;\r\n        keyData = me.#toUint8Array(keyData);\r\n        const name = algorithm.name || algorithm;\r\n        const wasm = me.crypto;\r\n        let res = null;\r\n        switch (name) {\r\n            case 'AES-CBC':\r\n            case 'AES-CTR':\r\n            case 'AES-GCM':\r\n            case 'HMAC':\r\n            case 'PBKDF2':\r\n            case 'HKDF':\r\n                res = me.#importSyncKey(format, keyData, algorithm, extractable, keyUsages);\r\n                break;\r\n            case 'RSASSA-PKCS1-v1_5':\r\n            case 'RSA-OAEP':\r\n            case 'RSA-PSS':\r\n                res = me.#importAsyncKey(format, keyData, algorithm, extractable, keyUsages, wasm.rsa);\r\n                break;\r\n            case 'ECDSA':\r\n                res = me.#importAsyncKey(format, keyData, algorithm, extractable, keyUsages, wasm.ecdsa);\r\n                break;\r\n            case 'ECDH':\r\n                res = me.#importAsyncKey(format, keyData, algorithm, extractable, keyUsages, wasm.ecdh);\r\n                break;\r\n            case 'Ed25519':\r\n                res = me.#importAsyncKey(format, keyData, algorithm, extractable, keyUsages, wasm.ed25519);\r\n                break;\r\n            default: throw new Error(CryptoJS.#ERR_INVALID_ALG);\r\n        }\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} key \r\n     * @param {*} data \r\n     */\r\n    async sign(algorithm, key, data) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, key);\r\n        const res = key.sign(me.#toUint8Array(data), algorithm);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return me.asRaw ? res.buffer : res;;\r\n    }\r\n\r\n    /**\r\n     * Refer to https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\r\n     * @param {*} algorithm \r\n     * @param {*} key \r\n     * @param {*} signature \r\n     * @param {*} data \r\n     */\r\n    async verify(algorithm, key, signature, data) {\r\n        const me = this;\r\n        me.#verifyName(algorithm, key);\r\n        const res = key.verify(me.#toUint8Array(signature), me.#toUint8Array(data), algorithm);\r\n        if (typeof res?.error === 'string') throw new Error(res.error);\r\n        return res;\r\n    }\r\n\r\n    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages) {\r\n        throw new Error(CryptoJS.#ERR_UNSUPPORTED);\r\n    }\r\n\r\n    async wrapKey(format, key, wrappingKey, wrapAlgo) {\r\n        throw new Error(CryptoJS.#ERR_UNSUPPORTED);\r\n    }\r\n\r\n}"],"names":["CryptoKeyJS","static","algorithm","extractable","usages","key","constructor","error","Error","name","indexOf","DOMException","me","this","isAsync","ASYNC_KEYS","algorithmName","isPublic","length","some","r","includes","isPrivate","PRIVATE_OPS","type","Object","assign","Array","from","crypto","globalThis","CryptoWasm","gc","hashName","algo","hash","namedCurve","hashSize","hashid","hashID","jwkAlgo","hbit","split","parseInt","verify","format","expected","verifyAsync","exportLocal","alg","ext","k","toB64","key_ops","kty","exportKeyAsync","obj","fmt","ExportKey","signHMAC","data","hmac","Hmac1Sign","Hmac256Sign","Hmac384Sign","Hmac512Sign","ERR_INVALID_SHA","verifyHMAC","signature","Hmac1Verify","Hmac256Verify","Hmac384Verify","Hmac512Verify","signRSASA","rsa","SignPKCS1v15","verifyRSASA","VerifyPKCS1v15","signPSS","opt","saltLength","SignPSS","verifyPSS","VerifyPSS","signEcdsa","signEd25519","size","ecdsa","Sign","verifyEcdsa","verifyEd25519","Verify","ed25519","deriveECDHBits","bitLength","keylen","curveSize","Uint8Array","raw","ecdh","DeriveKey","public","deriveHKDFBits","GenerateHKDF","salt","info","derivePBKDF2Bits","GeneratePBKDF2","iterations","deriveECDHKey","derivedKeyAlgorithm","keyUsages","deriveHKDFKey","derivePBKDF2Key","len","deriveBits","keyName","ERR_INVALID_ALG","deriveKey","sign","decrypt","iv","aes","Decrypt","CTRDecrypt","CBCDecrypt","GCMDecrypt","encrypt","Encrypt","CTREncrypt","CBCEncrypt","GCMEncrypt","export","curve","WasmLoader","ready","GOPATH","CRYPTO_GO","WASMPATH","CRYPTO_WASM","iid","clearInterval","go","initGO","result","loadWasm","importObject","run","instance","then","release","GCToken","import","Go","wasm","imports","WebAssembly","instantiate","instantiateStreaming","fetch","fileName","mimeType","blob","Blob","url","URL","createObjectURL","downloadURL","setTimeout","revokeObjectURL","a","document","createElement","href","download","click","CryptoJS","asRaw","RETURN_RAW","toUint8Array","ArrayBuffer","DataView","buffer","slice","byteOffset","byteLength","ERR_INVALID_FORMAT","TypeError","importAsyncKey","keyData","cryptojs","ImportKey","importSyncKey","generateKeyAES","random","generateKeyHMAC","blockSize","generateKeyRSA","modulusLength","pex","publicExponent","forEach","v","GenerateKey","pubu","privu","publicKey","privateKey","generateKeyEC","generateSignKeyEC","generateKeyECDSA","generateKeyECDH","verifyName","ERR_INVALID_KEY_ALG","randomUUID","getRandomValues","s","toHex","match","map","pop","join","async","counter","res","baseKey","Sha1","Sha256","Sha384","Sha512","wrappedKey","unwrappingKey","unwrapAlgo","unwrappedKeyAlgo","ERR_UNSUPPORTED","wrappingKey","wrapAlgo"],"mappings":"AAGe,MAAMA,YAEjBC,SAA0B,gBAC1BA,SAA0B,oBAE1BA,SAAqB,CAAC,QAAS,OAAQ,UAAW,WAAY,oBAAqB,UAAW,UAC9FA,SAAsB,CAAC,OAAQ,UAAW,aAAc,aAExDC,GACAC,GACAC,GACAC,GAEAC,YAAYJ,EAAWC,EAAaC,EAAQC,GAExC,GAA0B,iBAAfA,GAAKE,MAAoB,MAAM,IAAIC,MAAMH,EAAIE,OAExD,GAAIJ,IAAgBD,EAAUO,MAAQP,GAAWQ,QAAQ,QAAU,EAC/D,MAAM,IAAIC,aAAa,uCAG3B,MAAMC,EAAKC,KACXD,GAAGV,EAAaA,EAChBU,GAAGT,EAAeA,EAClBS,GAAGR,EAAUA,EACbQ,GAAGP,EAAOA,CACb,CAEGF,kBACA,OAAOU,MAAKV,CACf,CAEGW,cACA,OAAOd,aAAYe,EAAYL,QAAQG,MAAKG,IAAmB,CAClE,CAEGC,eACA,MAAML,EAAKC,KACX,QAAKD,EAAGE,UACqB,IAAtBF,GAAGR,EAAQc,QAAgB,CAAC,SAAU,WAAWC,MAAKC,GAAKR,GAAGR,EAAQiB,SAASD,KACzF,CAEGE,gBACA,MAAMV,EAAKC,KACX,QAAKD,EAAGE,SACDd,aAAYuB,EAAaJ,MAAKC,GAAKR,GAAGR,EAAQiB,SAASD,IACjE,CAEGI,WAEA,OADWX,KACHC,QADGD,KAEDS,UAAY,UAAY,SADV,QAE3B,CAEGpB,gBACA,MAA+B,iBAApBW,MAAKX,EAAgCW,MAAKX,EAC9CuB,OAAOC,OAAO,CAAE,EAAEb,MAAKX,EACjC,CAEGE,aACA,OAAOuB,MAAMC,KAAKf,MAAKT,EAC1B,CAEGyB,aAEA,OADAC,WAAWC,WAAWC,IAAK,EACpBF,WAAWC,UACrB,CAEGE,QACA,MAAMC,EAAOrB,MAAKX,EAClB,OAAOgC,EAAKC,MAAM1B,MAAQyB,EAAKC,MAAQD,EAAKE,UAC/C,CAEGpB,QACA,OAAOH,MAAKX,EAAWO,MAAQI,MAAKX,CACvC,CAEGmC,QACA,OAAOrC,YAAYqC,SAASxB,MAAKoB,EACpC,CAEGK,QACA,OAAOzB,MAAK0B,EAAQ1B,MAAKoB,EAC5B,CAEGO,QAEA,MAAM5B,EAAKC,KACL4B,EAAO7B,GAAG0B,EAEhB,GAAI1B,EAAGE,QAAS,CACZ,OAAOF,GAAGI,GACN,IAAK,kBAAoB,MAAO,KAAKyB,IACrC,IAAK,WAAa,OAAiB,IAATA,EAAa,WAAa,YAAYA,IAChE,IAAK,UAAY,MAAO,KAAKA,IAEjC,OAAO,IACV,CAED,MAA0B,SAAtB7B,GAAGI,EACI,KAAKJ,GAAGV,EAAWgB,QAAUN,GAAG0B,IAGpC,IAAI1B,GAAGV,EAAWgB,SAASN,GAAGI,EAAe0B,MAAM,KAAK,IAClE,CAEDH,GAAQJ,EAAO,IACX,OAAOQ,SAASR,EAAKO,MAAM,KAAK,GACnC,CAEDE,GAAQC,EAAQC,GACZ,IAAKjC,MAAKV,EAAc,MAAM,IAAIQ,aAAa,sBAC/C,GAAImC,EAASpC,QAAQmC,GAAU,EAAG,MAAM,IAAIlC,aAAa,eAC5D,CAEDoC,GAAaF,GACT,OAAOhC,MAAK+B,EAAQC,EAAQ,CAAC,QAAS,OAAQ,MAAM,OACvD,CAEDG,GAAaH,GACT,MAAMjC,EAAKC,KAEX,OADAD,GAAGgC,EAAQC,EAAQ,CAAC,MAAO,QACZ,QAAXA,EAAyBjC,GAAGP,EACzB,CACH4C,IAAQrC,GAAG4B,EACXU,KAAQ,EACRC,EAAMvC,EAAGiB,OAAOuB,MAAMxC,GAAGP,GAAM,GAC/BgD,QAAYzC,GAAGR,EACfkD,IAAQ,MAEf,CAEDC,GAAgBV,EAAQW,GAEpB,MAAM5C,EAAKC,KACXD,GAAGmC,EAAaF,GAChB,IAAIY,EAAM,EACV,OAAQZ,GACJ,IAAK,MAAOY,EAAM,EAClB,MACA,IAAK,MAAOA,EAAM,EAClB,MACA,IAAK,OAAQA,EAAM,EACnB,IAAK,QAASA,EAAM,EAGxB,MAAMpD,EAAMmD,EAAIE,UAAU9C,GAAGP,EAAMO,EAAGK,SAAUwC,GAChD,GAAe,QAAXZ,EAAkB,OAAOxC,EAE7B,GAAe,QAAXwC,EAAkB,CAClBxC,EAAIgD,QAAUzC,GAAGR,EACkC,IAArCQ,GAAGI,EAAeN,QAAQ,SAC7BL,EAAI4C,IAAMrC,GAAG4B,EAE3B,CAED,OAAOnC,CACV,CAEDsD,GAAUC,GACN,MAAMhD,EAAKC,KACLgD,EAAOjD,EAAGiB,OAAOgC,KACjBpD,EAAOG,GAAGqB,EAChB,OAAQxB,GACJ,IAAK,QAAS,OAAOoD,EAAKC,UAAUF,EAAMhD,GAAGP,GAC7C,IAAK,UAAW,OAAOwD,EAAKE,YAAYH,EAAMhD,GAAGP,GACjD,IAAK,UAAW,OAAOwD,EAAKG,YAAYJ,EAAMhD,GAAGP,GACjD,IAAK,UAAW,OAAOwD,EAAKI,YAAYL,EAAMhD,GAAGP,GACjD,QAAS,MAAM,IAAIG,MAAM,GAAGR,aAAYkE,OAAsBzD,KAGrE,CAED0D,GAAYC,EAAWR,GACnB,MAAMhD,EAAKC,KACLgD,EAAOjD,EAAGiB,OAAOgC,KACjBpD,EAAOG,GAAGqB,EAChB,OAAQxB,GACJ,IAAK,QAAS,OAAOoD,EAAKQ,YAAYT,EAAMQ,EAAWxD,GAAGP,GAC1D,IAAK,UAAW,OAAOwD,EAAKS,cAAcV,EAAMQ,EAAWxD,GAAGP,GAC9D,IAAK,UAAW,OAAOwD,EAAKU,cAAcX,EAAMQ,EAAWxD,GAAGP,GAC9D,IAAK,UAAW,OAAOwD,EAAKW,cAAcZ,EAAMQ,EAAWxD,GAAGP,GAC9D,QAAS,MAAM,IAAIG,MAAM,GAAGR,aAAYkE,OAAsBzD,KAGrE,CAEDgE,GAAWb,GACP,MAAMhD,EAAKC,KACX,OAAOD,EAAGiB,OAAO6C,IAAIC,aAAa/D,GAAGP,EAAMuD,EAAMhD,GAAGyB,EACvD,CAEDuC,GAAaR,EAAWR,GACpB,MAAMhD,EAAKC,KACX,OAAOD,EAAGiB,OAAO6C,IAAIG,eAAejE,GAAGP,EAAMuD,EAAMQ,EAAWxD,GAAGyB,EACpE,CAEDyC,GAASlB,EAAMmB,GACX,MAAMnE,EAAKC,KACLmE,EAAaD,EAAIC,YAAc,EACrC,OAAOpE,EAAGiB,OAAO6C,IAAIO,QAAQrE,GAAGP,EAAMuD,EAAMhD,GAAGyB,EAAW2C,EAC7D,CAEDE,GAAWd,EAAWR,EAAMmB,GACxB,MAAMnE,EAAKC,KACLmE,EAAaD,EAAIC,YAAc,EACrC,OAAOpE,EAAGiB,OAAO6C,IAAIS,UAAUvE,GAAGP,EAAMuD,EAAMQ,EAAWxD,GAAGyB,EAAW2C,EAC1E,CAEDI,GAAWxB,EAAMmB,GACb,MAAMnE,EAAKC,KACX,GAAiC,YAA7BD,GAAGV,EAAWkC,WACd,OAAOxB,GAAGyE,EAAazB,GAE3B,MAAMzB,EAAO4C,EAAI5C,KAAK1B,MAAQsE,EAAI5C,KAC5BmD,EAAO1E,GAAG2B,EAAQJ,GACxB,OAAOvB,EAAGiB,OAAO0D,MAAMC,KAAK5E,GAAGP,EAAMuD,EAAM0B,GAAM,EACpD,CAEDG,GAAarB,EAAWR,EAAMmB,GAC1B,MAAMnE,EAAKC,KACX,GAAiC,YAA7BD,GAAGV,EAAWkC,WACd,OAAOxB,GAAG8E,EAAetB,EAAWR,GAExC,MAAMzB,EAAO4C,EAAI5C,KAAK1B,MAAQsE,EAAI5C,KAC5BmD,EAAO1E,GAAG2B,EAAQJ,GACxB,OAAOvB,EAAGiB,OAAO0D,MAAMI,OAAO/E,GAAGP,EAAMuD,EAAMQ,EAAWkB,GAAM,EACjE,CAEDD,GAAazB,GAET,OADW/C,KACDgB,OAAO+D,QAAQJ,KADd3E,MACsBR,EAAMuD,GAAM,EAChD,CAED8B,GAAetB,EAAWR,GAEtB,OADW/C,KACDgB,OAAO+D,QAAQD,OADd9E,MACwBR,EAAMuD,EAAMQ,GAAW,EAC7D,CAEDyB,GAAgB3F,EAAW4F,EAAY,GACnC,MAAMlF,EAAKC,KACLkF,EAAS/F,YAAYgG,UAAUpF,GAAGV,EAAWkC,YACnD,GAAI0D,EAAYC,GAAsB,QAAXA,GAAoBD,EAAY,IAAM,MAAM,IAAInF,aAAa,kBACxF,GAAkB,IAAdmF,EAAiB,OAAO,IAAIG,WAChC,MAAMC,EAAMtF,EAAGiB,OAAOsE,KAAKC,UAAUxF,GAAGP,EAAMH,EAAUmG,QAAOhG,EAAMyF,GACrE,GAA0B,iBAAfI,GAAK3F,MAAoB,MAAM,IAAIC,MAAM0F,EAAI3F,OACxD,OAAO2F,CACV,CAEDI,GAAgBpG,EAAW4F,GACvB,IAAKA,GAA2B,IAAdA,GAAmBA,EAAY,EAAI,EAAG,MAAM,IAAInF,aAAa,kBAE/E,OADWE,KACDgB,OAAO0E,aADN1F,MACsBR,EAAMH,EAAUsG,KAAMtG,EAAUuG,KAAMX,EAC1E,CAEDY,GAAkBxG,EAAW4F,GACzB,GAAkB,IAAdA,EAAiB,OAAO,IAAIG,WAChC,MACMX,EAAOtF,YAAYqC,SAASnC,EAAUiC,MAC5C,OAFWtB,KAEDgB,OAAO8E,eAFN9F,MAEwBR,EAAMH,EAAUsG,KAAMtG,EAAU0G,WAAYd,EAAWR,EAC7F,CAEDuB,GAAe3G,EAAW4G,EAAqB3G,EAAa4G,GACxD,MAAM7F,EAAS4F,EAAoB5F,OAC7Bb,EAAMQ,MAAKgF,EAAgB3F,EAAWgB,GAC5C,OAAO,IAAIlB,YAAY8G,EAAqB3G,EAAa4G,EAAW1G,EACvE,CAED2G,GAAe9G,EAAW4G,EAAqB3G,EAAa4G,GACxD,MAAMzB,EAAOtF,YAAYqC,SAASnC,EAAUiC,MACtC9B,EAAMQ,MAAKyF,EAAgBpG,EAAWoF,GAC5C,OAAO,IAAItF,YAAY8G,EAAqB3G,EAAa4G,EAAW1G,EACvE,CAED4G,GAAiB/G,EAAW4G,EAAqB3G,EAAa4G,GAC1D,MACMG,EAAMJ,EAAoB5F,QAAUlB,YAAYqC,SAASyE,EAAoB3E,MAC7E9B,EAFKQ,MAEI6F,EAAkBxG,EAAWgH,GAC5C,OAAO,IAAIlH,YAAY8G,EAAqB3G,EAAa4G,EAAW1G,EACvE,CAED8G,WAAWjH,EAAWgB,GAElB,MAAMN,EAAKC,KACLuG,EAAUxG,GAAGI,EACbP,EAAOP,EAAUO,OAAS2G,EAAUlH,EAAUO,KAAO,GAAGP,EAAUO,YAAY2G,IAEpF,OAAQ3G,GACJ,IAAK,SACL,IAAK,OAAQ,OAAOG,GAAGiF,EAAgB3F,EAAWgB,GAClD,IAAK,OAAQ,OAAON,GAAG0F,EAAgBpG,EAAWgB,GAClD,IAAK,SAAU,OAAON,GAAG8F,EAAkBxG,EAAWgB,GACtD,QAAS,MAAM,IAAIV,MAAM,GAAGR,aAAYqH,OAAsB5G,KAErE,CAED6G,UAAUpH,EAAW4G,EAAqB3G,EAAa4G,GAEnD,MAAMnG,EAAKC,KACLuG,EAAUxG,GAAGI,EACbP,EAAOP,EAAUO,OAAS2G,EAAUlH,EAAUO,KAAO,GAAGP,EAAUO,YAAY2G,IAEpF,OAAQ3G,GACJ,IAAK,SACL,IAAK,OAAQ,OAAOG,GAAGiG,EAAe3G,EAAW4G,EAAqB3G,EAAa4G,GACnF,IAAK,OAAQ,OAAOnG,GAAGoG,EAAe9G,EAAW4G,EAAqB3G,EAAa4G,GACnF,IAAK,SAAU,OAAOnG,GAAGqG,EAAiB/G,EAAW4G,EAAqB3G,EAAa4G,GACvF,QAAS,MAAM,IAAIvG,MAAM,GAAGR,aAAYqH,OAAsB5G,KAGrE,CAED8G,KAAK3D,EAAMmB,GACP,MAAMnE,EAAKC,KACLJ,EAAOG,GAAGI,EAChB,OAAQP,GACJ,IAAK,oBAAqB,OAAOG,GAAG6D,EAAWb,GAC/C,IAAK,UAAW,OAAOhD,GAAGkE,EAASlB,EAAMmB,GACzC,IAAK,QAAS,OAAOnE,GAAGwE,EAAWxB,EAAMmB,GACzC,IAAK,OAAQ,OAAOnE,GAAG+C,EAAUC,GACjC,IAAK,UAAW,OAAOhD,GAAGyE,EAAazB,GACvC,QAAS,MAAM,IAAIpD,MAAM,GAAGR,aAAYqH,OAAsB5G,KAErE,CAEDmC,OAAOwB,EAAWR,EAAMmB,GACpB,MAAMnE,EAAKC,KACLJ,EAAOG,GAAGI,EAChB,OAAQP,GACJ,IAAK,oBAAqB,OAAOG,GAAGgE,EAAaR,EAAWR,GAC5D,IAAK,UAAW,OAAOhD,GAAGsE,EAAWd,EAAWR,EAAMmB,GACtD,IAAK,QAAS,OAAOnE,GAAG6E,EAAarB,EAAWR,EAAMmB,GACtD,IAAK,OAAQ,OAAOnE,GAAGuD,EAAYC,EAAWR,GAC9C,IAAK,UAAW,OAAOhD,GAAG8E,EAAetB,EAAWR,GACpD,QAAS,MAAM,IAAIpD,MAAM,GAAGR,aAAYqH,OAAsB5G,KAErE,CAED+G,QAAQ5D,EAAM6D,GACV,MAAM7G,EAAKC,KACL6G,EAAM9G,EAAGiB,OAAO6F,IAChBjH,EAAOG,GAAGI,EAChB,OAAQP,GACJ,IAAK,WAAY,OAAOG,EAAGiB,OAAO6C,IAAIiD,QAAQ/G,GAAGP,EAAMO,GAAGyB,EAAWuB,GACrE,IAAK,UAAW,OAAO8D,EAAIE,WAAWhH,GAAGP,EAAMuD,EAAM6D,GACrD,IAAK,UAAW,OAAOC,EAAIG,WAAWjH,GAAGP,EAAMuD,EAAM6D,GACrD,IAAK,UAAW,OAAOC,EAAII,WAAWlH,GAAGP,EAAMuD,EAAM6D,GACrD,QAAS,MAAM,IAAIjH,MAAM,GAAGR,aAAYqH,OAAsB5G,KAErE,CAEDsH,QAAQnE,EAAM6D,GACV,MAAM7G,EAAKC,KACL6G,EAAM9G,EAAGiB,OAAO6F,IAChBjH,EAAOG,GAAGI,EAChB,OAAQP,GACJ,IAAK,WAAY,OAAOG,EAAGiB,OAAO6C,IAAIsD,QAAQpH,GAAGP,EAAMO,GAAGyB,EAAWuB,GACrE,IAAK,UAAW,OAAO8D,EAAIO,WAAWrH,GAAGP,EAAMuD,EAAM6D,GACrD,IAAK,UAAW,OAAOC,EAAIQ,WAAWtH,GAAGP,EAAMuD,EAAM6D,GACrD,IAAK,UAAW,OAAOC,EAAIS,WAAWvH,GAAGP,EAAMuD,EAAM6D,GACrD,QAAS,MAAM,IAAIjH,MAAM,GAAGR,aAAYqH,OAAsB5G,KAErE,CAED2H,OAAOvF,GACH,MAAMjC,EAAKC,KACX,IAAKD,GAAGT,EAAc,MAAM,IAAIQ,aAAa,sBAC7C,MAAMF,EAAOG,GAAGI,EAChB,OAAQP,GACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,OACL,IAAK,SACL,IAAK,OACD,OAAOG,GAAGoC,EAAaH,GAC3B,IAAK,oBACL,IAAK,WACL,IAAK,UACD,OAAOjC,GAAG2C,EAAgBV,EAAQjC,EAAGiB,OAAO6C,KAChD,IAAK,QACD,OAAO9D,GAAG2C,EAAgBV,EAAQjC,EAAGiB,OAAO0D,OAChD,IAAK,OACD,OAAO3E,GAAG2C,EAAgBV,EAAQjC,EAAGiB,OAAOsE,MAChD,IAAK,UACD,OAAOvF,GAAG2C,EAAgBV,EAAQjC,EAAGiB,OAAO+D,SAChD,QAAS,MAAM,IAAIpF,MAAM,GAAGR,aAAYqH,OAAsB5G,KAGrE,CAEDR,iBAAiBoI,GACb,OAAQA,GACJ,IAAK,QACD,OAAO,IACX,IAAK,QACD,OAAO,IACX,IAAK,QACD,OAAO,IACX,IAAK,UACL,IAAK,SACD,OAAO,MACX,QAAS,MAAM,IAAI7H,MAAM,iBAEhC,CAEDP,iBAAiBkC,GACb,IAAImD,EAAO,EACX,OAAQnD,GACJ,IAAK,QACL,IAAK,UACDmD,EAAO,IACP,MACJ,IAAK,UACL,IAAK,UACDA,EAAO,KACP,MACJ,QAAS,MAAM,IAAI9E,MAAM,GAAGR,aAAYkE,OAAsB/B,KAElE,OAAOmD,CACV,CAEDrF,gBAAgBkC,GACZ,IAAImD,EAAO,EACX,OAAQnD,GACJ,IAAK,QACDmD,EAAO,GACP,MACJ,IAAK,UACDA,EAAO,GACP,MACJ,IAAK,UACDA,EAAO,GACP,MACJ,IAAK,UACDA,EAAO,GACP,MACJ,QAAS,MAAM,IAAI9E,MAAM,GAAGR,aAAYkE,OAAsB/B,KAElE,OAAOmD,CACV,ECpbU,MAAMgD,WAEjBrI,mBAAoB,EACpBA,UAAgB,EAChBA,SAAc,EACdA,SAAc,KAEHsI,mBACP,OAAOD,YAAWC,CACrB,CAEUC,oBAEP,MAAO,GADQ1G,WAAW2G,WAAa,qBAE1C,CAEUC,sBAEP,MAAO,GADQ5G,WAAW6G,aAAe,kBAE5C,CAED1I,WACIqI,YAAWC,GAAS,EAChBD,YAAWM,GAAMC,cAAcP,YAAWM,GAC9CN,YAAWM,EAAO,CACrB,CAED3I,oBACI,GAAIqI,YAAWC,EAAQ,OACvBD,YAAWpC,EAAO,KAClBoC,YAAWM,EAAO,EAClB,MAAME,QAAWR,YAAWS,IACtBC,QAAeV,YAAWW,EAAUX,WAAWI,SAAUI,EAAGI,cAClEJ,EAAGK,IAAIH,EAAOI,UAAUC,MAAK,IAAMf,YAAWgB,MAC9ChB,YAAWM,EAAO9G,WAAWC,WAAWwH,UACxCjB,YAAWC,GAAS,EACpBD,YAAWpC,EAAO,CAAE8C,SAAQF,KAC/B,CAED7I,uBACUuJ,OAAOlB,WAAWE,QAIxB,OAHW,IAAI1G,WAAW2H,EAI7B,CAEDxJ,eAAuByJ,EAAMC,GACzB,GAA2B,iBAAhBC,aAA+D,mBAA5BA,YAAYC,YACtD,MAAM,IAAIrJ,MAAM,iCAEpB,aAAaoJ,YAAYE,qBAAqBC,MAAML,GAAOC,EAC9D,CAED1J,SAAqB2D,EAAMoG,EAAUC,GACjC,MAAMC,EAAO,IAAIC,KAAK,CAACvG,GAAO,CAAEpC,KAAMyI,IAChCG,EAAMtI,WAAWuI,IAAIC,gBAAgBJ,GAC3C5B,YAAWiC,EAAaH,EAAKJ,GAC7BQ,YAAW,IAAM1I,WAAWuI,IAAII,gBAAgBL,IAAM,IACzD,CAEDnK,SAAoB2D,EAAMoG,GACtB,MAAMU,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOjH,EACT8G,EAAEI,SAAWd,EACbU,EAAEK,OACL,ECnEU,MAAMC,SAEjB/K,mBAAoB,EACpBA,SAA0B,qBAC1BA,SAA6B,iBAC7BA,SAA0B,yBAC1BA,SAA8B,4BAC9BA,SAA0B,gBAEtB4B,aAEA,OADAC,WAAWC,WAAWC,IAAK,EACpBF,WAAWC,UACrB,CAEGkJ,YACA,OAAiC,IAA1B3C,WAAW4C,UACrB,CAEDC,GAAcvH,GACV,GAAIA,aAAgBqC,WAAY,OAAOrC,EACvC,GAAIA,aAAgBwH,YAAa,OAAO,IAAInF,WAAWrC,GACvD,GAAIA,aAAgByH,SAAU,OAAO,IAAIpF,WAAWrC,EAAK0H,OAAOC,MAAM3H,EAAK4H,WAAY5H,EAAK4H,WAAa5H,EAAK6H,aAC9G,GAAI7H,EAAK0H,OAAQ,OAAOzK,MAAKsK,EAAcvH,EAAK0H,QAChD,MAAM,IAAI9K,MAAM,qBACnB,CAEDoC,GAAQC,EAAQC,GACZ,GAAIA,EAASpC,QAAQmC,GAAU,EAAG,MAAM,IAAIlC,aAAaqK,UAASU,EACrE,CAED3I,GAAaF,GACT,OAAOhC,MAAK+B,EAAQC,EAAQ,CAAC,QAAS,OAAQ,OACjD,CAED5B,GAAU4B,GACN,OAAQA,GACJ,IAAK,QAAS,OAAO,EACrB,IAAK,OACL,IAAK,MACD,OAAO,EACX,QAAS,MAAM,IAAI8I,UAAUX,UAASU,GAE7C,CAEDE,GAAgB/I,EAAQgJ,EAAS3L,EAAWC,EAAaC,EAAQ0L,GAClDjL,MACRkC,EAAaF,GAChB,MAAM5B,EAFKJ,MAESI,EAAU4B,GACxBxC,EAAMyL,EAASC,UAAUF,EAAS5K,GACxC,OAAO,IAAIjB,YAAYE,EAAWC,EAAaC,EAAQC,EAC1D,CAED2L,GAAenJ,EAAQgJ,EAAS3L,EAAWC,EAAaC,GAEpD,OADAS,MAAK+B,EAAQC,EAAQ,CAAC,QACf,IAAI7C,YAAYE,EAAWC,EAAaC,EAAQyL,EAC1D,CAEDI,GAAgB/L,EAAWC,EAAaC,GACpC,IAAIC,EAAM,KACV,OAAQH,EAAUgB,QACd,KAAK,IACL,KAAK,IACL,KAAK,IACDb,EAAMQ,KAAKgB,OAAOqK,OAAOhM,EAAUgB,OAAS,GAC5C,MACJ,QAAS,MAAM,IAAIV,MAAM,2BAE7B,OAAO,IAAIR,YAAYE,EAAWC,EAAaC,EAAQC,EAC1D,CAED8L,GAAiBjM,EAAWC,EAAaC,GACrC,MAAMkF,EAAOpF,EAAUgB,QAAUlB,YAAYoM,UAAUlM,EAAUiC,MAC3D9B,EAAMQ,KAAKgB,OAAOqK,OAAO5G,EAAO,GACtC,OAAO,IAAItF,YAAYE,EAAWC,EAAaC,EAAQC,EAC1D,CAEDgM,GAAgBnM,EAAWC,EAAaC,GACpC,IAAIC,EAAM,KACV,OAAQH,EAAUoM,eACd,KAAK,KACL,KAAK,KACL,KAAK,KACD,IAAIC,EAAM,EACVrM,EAAUsM,gBAAgBC,SAAQC,GAAKH,GAAOA,GAAO,IAAU,IAAJG,KAC3DrM,EAAMQ,KAAKgB,OAAO6C,IAAIiI,YAAYzM,EAAUoM,cAAeC,GAC3D,MACJ,QAAS,MAAM,IAAI/L,MAAM,0BAG7B,IAAIoM,EAAO,KACPC,EAAQ,KASZ,MARuB,aAAnB3M,EAAUO,MACVmM,EAAO,CAAC,WACRC,EAAQ,CAAC,aAETD,EAAO,CAAC,UACRC,EAAQ,CAAC,SAGN,CACHC,UAAW,IAAI9M,YAAYE,EAAWC,EAAayM,EAAMvM,GACzD0M,WAAY,IAAI/M,YAAYE,EAAWC,EAAa0M,EAAOxM,GAElE,CAED2M,GAAe9M,EAAW4L,GACtB,MAAMxG,EAAOtF,YAAYgG,UAAU9F,EAAUkC,YAC7C,OAAO0J,EAASa,YAAYrH,EAC/B,CAED2H,GAAmB/M,EAAWC,EAAaC,EAAQoD,GAC/C,MAAMnD,EAAMQ,MAAKmM,EAAe9M,EAAWsD,GAC3C,MAAO,CACHsJ,UAAW,IAAI9M,YAAYE,EAAWC,EAAa,CAAC,UAAWE,GAC/D0M,WAAY,IAAI/M,YAAYE,EAAWC,EAAa,CAAC,QAASE,GAErE,CAED6M,IAAkBhN,EAAWC,EAAaC,GACtC,MAAMQ,EAAKC,KACL2C,EAA+B,YAAzBtD,EAAUkC,WAA2BxB,EAAGiB,OAAO+D,QAAUhF,EAAGiB,OAAO0D,MAC/E,OAAO3E,GAAGqM,EAAmB/M,EAAWC,EAAaC,EAAQoD,EAChE,CAGD2J,IAAiBjN,EAAWC,EAAaC,GACrC,MACMC,EADKQ,MACImM,EAAe9M,EADnBW,KACiCgB,OAAOsE,MACnD,MAAO,CACH2G,UAAW,IAAI9M,YAAYE,EAAWC,EAAa,GAAIE,GACvD0M,WAAY,IAAI/M,YAAYE,EAAWC,EAAaC,EAAQC,GAEnE,CAED+M,IAAYlN,EAAWG,GAGnB,IAFaH,EAAUO,MAAQP,KACfG,EAAIH,UAAUO,MAAQJ,EAAIH,WACrB,MAAM,IAAIM,MAAMwK,UAASqC,EACjD,CAEDC,aACI,MAAMpH,EAAM,IAAID,WAAW,IAC3BpE,OAAO0L,gBAAgBrH,GACvB,MAAMsH,EAAI3M,KAAKgB,OAAO4L,MAAMvH,GAAKwH,MAAM,SACvC,GAAwB,iBAAbF,GAAGjN,MAAoB,MAAM,IAAIC,MAAMgN,EAAEjN,OACpD,MAAO,uBAAuBmC,MAAM,IAAIiL,KAAIjB,GAAW,MAANA,EAAYA,EAAIc,EAAEI,QAAOC,KAAK,GAClF,CAQDC,cAAc5N,EAAWG,EAAKuD,GAC1B,MAAMhD,EAAKC,KACXD,GAAGwM,GAAYlN,EAAWG,GAC1BuD,EAAOhD,GAAGuK,EAAcvH,GACxB,IAAI6D,EAAKvH,EAAUuH,IAAMvH,EAAU6N,QAC/BtG,IAAIA,EAAK7G,GAAGuK,EAAc1D,IAC9B,MAAMuG,GAAO3N,EAAI0M,YAAc1M,GAAKmH,QAAQ5D,EAAM6D,GAClD,GAA0B,iBAAfuG,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOK,EAAGqK,MAAQ+C,EAAI1C,OAAS0C,CAClC,CAQDF,iBAAiB5N,EAAW+N,EAAS/M,GACtBL,MACRuM,GAAYlN,EAAW+N,GAC1B,MAAMD,EAAMC,EAAQ9G,WAAWjH,EAAWgB,GAC1C,GAA0B,iBAAf8M,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAJWM,KAIDoK,MAAQ+C,EAAI1C,OAAS0C,CAClC,CAUDF,gBAAgB5N,EAAW+N,EAASnH,EAAqB3G,EAAa4G,GACvDlG,MACRuM,GAAYlN,EAAW+N,GAC1B,MAAMD,EAAMC,EAAQ3G,UAAUpH,EAAW4G,EAAqB3G,EAAa4G,GAC3E,GAA0B,iBAAfiH,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOyN,CACV,CAODF,aAAa5N,EAAW0D,GAEpB,MAAMhD,EAAKC,KACLsB,EAAOvB,EAAGiB,OAAOM,KAEvByB,EAAOhD,GAAGuK,EAAcvH,GAExB,IAAIoK,EAAM,KACV,OAAQ9N,GACJ,IAAK,QACD8N,EAAM7L,EAAK+L,KAAKtK,GAChB,MACJ,IAAK,UACDoK,EAAM7L,EAAKgM,OAAOvK,GAClB,MACJ,IAAK,UACDoK,EAAM7L,EAAKiM,OAAOxK,GAClB,MACJ,IAAK,UACDoK,EAAM7L,EAAKkM,OAAOzK,GAClB,MACJ,QACI,MAAM,IAAIpD,MAAMwK,UAAS9G,GAEjC,GAA0B,iBAAf8J,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOK,EAAGqK,MAAQ+C,EAAI1C,OAAS0C,CAClC,CAQDF,cAAc5N,EAAWG,EAAKuD,GAC1B,MAAMhD,EAAKC,KACXD,GAAGwM,GAAYlN,EAAWG,GAC1BuD,EAAOhD,GAAGuK,EAAcvH,GACxB,IAAI6D,EAAKvH,EAAUuH,IAAMvH,EAAU6N,QAC/BtG,IAAIA,EAAK7G,GAAGuK,EAAc1D,IAC9B,MAAMuG,GAAO3N,EAAIyM,WAAazM,GAAK0H,QAAQnE,EAAM6D,GACjD,GAA0B,iBAAfuG,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOK,EAAGqK,MAAQ+C,EAAI1C,OAAS0C,CAClC,CAUDF,gBAAgBjL,EAAQxC,GACpB,MAAM2N,EAAM3N,EAAI+H,OAAOvF,GACvB,GAA0B,iBAAfmL,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,MAAe,QAAXsC,EAAyBmL,EACtBnN,KAAKoK,OAAQ+C,EAAI1C,QAAgB0C,CAC3C,CAQDF,kBAAkB5N,EAAWC,EAAa4G,GAEtC,MAAMnG,EAAKC,KACX,IAAImN,EAAM,KACV,OAAQ9N,EAAUO,MACd,IAAK,UACL,IAAK,QACDuN,EAAMpN,GAAGsM,GAAkBhN,EAAWC,EAAa4G,GACnD,MACJ,IAAK,SACL,IAAK,OACDiH,EAAMpN,GAAGuM,GAAiBjN,EAAWC,EAAa4G,GAClD,MACJ,IAAK,oBACL,IAAK,WACL,IAAK,UACDiH,EAAMpN,GAAGyL,EAAgBnM,EAAWC,EAAa4G,GACjD,MACJ,IAAK,OACDiH,EAAMpN,GAAGuL,EAAiBjM,EAAWC,EAAa4G,GAClD,MACJ,IAAK,UACL,IAAK,UACL,IAAK,UACDiH,EAAMpN,GAAGqL,EAAgB/L,EAAWC,EAAa4G,GACjD,MACJ,QAAS,MAAM,IAAIvG,MAAMwK,UAAS3D,GAEtC,GAA0B,iBAAf2G,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOyN,CACV,CAWDF,gBAAgBjL,EAAQgJ,EAAS3L,EAAWC,EAAa4G,GACrD,MAAMnG,EAAKC,KACXgL,EAAUjL,GAAGuK,EAAcU,GAC3B,MAAMpL,EAAOP,EAAUO,MAAQP,EACzBwJ,EAAO9I,EAAGiB,OAChB,IAAImM,EAAM,KACV,OAAQvN,GACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,OACL,IAAK,SACL,IAAK,OACDuN,EAAMpN,GAAGoL,EAAenJ,EAAQgJ,EAAS3L,EAAWC,EAAa4G,GACjE,MACJ,IAAK,oBACL,IAAK,WACL,IAAK,UACDiH,EAAMpN,GAAGgL,EAAgB/I,EAAQgJ,EAAS3L,EAAWC,EAAa4G,EAAW2C,EAAKhF,KAClF,MACJ,IAAK,QACDsJ,EAAMpN,GAAGgL,EAAgB/I,EAAQgJ,EAAS3L,EAAWC,EAAa4G,EAAW2C,EAAKnE,OAClF,MACJ,IAAK,OACDyI,EAAMpN,GAAGgL,EAAgB/I,EAAQgJ,EAAS3L,EAAWC,EAAa4G,EAAW2C,EAAKvD,MAClF,MACJ,IAAK,UACD6H,EAAMpN,GAAGgL,EAAgB/I,EAAQgJ,EAAS3L,EAAWC,EAAa4G,EAAW2C,EAAK9D,SAClF,MACJ,QAAS,MAAM,IAAIpF,MAAMwK,UAAS3D,GAEtC,GAA0B,iBAAf2G,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOyN,CACV,CAQDF,WAAW5N,EAAWG,EAAKuD,GACvB,MAAMhD,EAAKC,KACXD,GAAGwM,GAAYlN,EAAWG,GAC1B,MAAM2N,EAAM3N,EAAIkH,KAAK3G,GAAGuK,EAAcvH,GAAO1D,GAC7C,GAA0B,iBAAf8N,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOK,EAAGqK,MAAQ+C,EAAI1C,OAAS0C,CAClC,CASDF,aAAa5N,EAAWG,EAAK+D,EAAWR,GACpC,MAAMhD,EAAKC,KACXD,GAAGwM,GAAYlN,EAAWG,GAC1B,MAAM2N,EAAM3N,EAAIuC,OAAOhC,GAAGuK,EAAc/G,GAAYxD,GAAGuK,EAAcvH,GAAO1D,GAC5E,GAA0B,iBAAf8N,GAAKzN,MAAoB,MAAM,IAAIC,MAAMwN,EAAIzN,OACxD,OAAOyN,CACV,CAEDF,gBAAgBjL,EAAQyL,EAAYC,EAAeC,EAAYC,EAAkBtO,EAAa4G,GAC1F,MAAM,IAAIvG,MAAMwK,UAAS0D,EAC5B,CAEDZ,cAAcjL,EAAQxC,EAAKsO,EAAaC,GACpC,MAAM,IAAIpO,MAAMwK,UAAS0D,EAC5B"}